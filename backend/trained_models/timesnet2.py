# # -*- coding: utf-8 -*-
# """TimesNet2.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1WqLciF-12ZLPP6kCWIzdf56XmcMkhrdC
# """

# # Copyright (c) 2023 THUML @ Tsinghua University
# # This code is licensed under the MIT License
# # See LICENSE file in the project root for full license information.

# # Commented out IPython magic to ensure Python compatibility.
# # %cd /content/drive/MyDrive/capstone/TimesNet/




import torch
import numpy as np
import os
import pickle
from trained_models.models.TimesNet import Model as TimesNet

# Config 클래스
class Configs:
    def __init__(self):
        self.task_name = 'classification'
        self.seq_len = 7
        self.label_len = 0
        self.pred_len = 0
        self.enc_in = 7
        self.d_model = 64
        self.embed = 'timeF'
        self.freq = 'd'
        self.dropout = 0.2
        self.e_layers = 2
        self.top_k = 3
        self.d_ff = 128
        self.num_kernels = 6
        self.num_class = 9

# 모델, 레이블 로딩
configs = Configs()
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = TimesNet(configs).to(device)

# 모델 가중치 불러오기
model_path = "trained_models/best_model.pth"
model.load_state_dict(torch.load(model_path, map_location=device))
model.eval()

# 레이블 인코더 불러오기
with open("trained_models/label_encoders.pkl", "rb") as f:
    le1, le2, le3 = pickle.load(f)


# 추론 함수
def predict_user_type(sample_data: list[list[float]]):
    """
    sample_data: 7일치 학습 정보 (7x7)
    """
    X_input = torch.tensor(np.array(sample_data).reshape(1, 7, 7), dtype=torch.float32).to(device)
    x_mark = torch.ones((1, 7), dtype=torch.float32).to(device)

    with torch.no_grad():
        pred = model(X_input, x_mark, None, None)
        out1, out2, out3 = torch.split(pred, [3, 2, 4], dim=1)

        pred1 = le1.inverse_transform(torch.argmax(out1, dim=1).cpu().numpy())[0]
        pred2 = le2.inverse_transform(torch.argmax(out2, dim=1).cpu().numpy())[0]
        pred3 = le3.inverse_transform(torch.argmax(out3, dim=1).cpu().numpy())[0]

    return {
        "sincerity": pred1,
        "repetition": pred2,
        "timeslot": pred3
    }
